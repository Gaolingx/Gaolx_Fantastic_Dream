// This code is automatically generated by PostProcessing Extension Wizard.
// For more information, please visit 
// https://github.com/ShiinaRinne/TimelineExtensions

using System;
using UnityEngine;
using UnityEngine.Timeline;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class MAODepthOfFieldBokehMixerBehaviour : PlayableBehaviour
{
    float m_DefaultFocusDistance;
    float m_DefaultAperture;
    float m_DefaultFocalLength;
    int m_DefaultBladeCount;
    float m_DefaultBladeCurvature;
    float m_DefaultBladeRotation;

    DepthOfField m_TrackBinding;
    bool m_FirstFrameHappened;

    public override void ProcessFrame(Playable playable, FrameData info, object playerData)
    {
        ((Volume) playerData).profile.TryGet(out m_TrackBinding);
        if (m_TrackBinding == null)
            return;
        
        if(!m_FirstFrameHappened)
        {
            m_DefaultFocusDistance = m_TrackBinding.focusDistance.value;
            m_DefaultAperture = m_TrackBinding.aperture.value;
            m_DefaultFocalLength = m_TrackBinding.focalLength.value;
            m_DefaultBladeCount = m_TrackBinding.bladeCount.value;
            m_DefaultBladeCurvature = m_TrackBinding.bladeCurvature.value;
            m_DefaultBladeRotation = m_TrackBinding.bladeRotation.value;

            m_FirstFrameHappened = true;
        }


        int inputCount = playable.GetInputCount();
        float blendedFocusDistance = 0f;
        float blendedAperture = 0f;
        float blendedFocalLength = 0f;
        float blendedBladeCount = 0;
        float blendedBladeCurvature = 0f;
        float blendedBladeRotation = 0f;

        float totalWeight = 0f;
        float greatestWeight = 0f;
        int currentInputs = 0;

        for(int i = 0; i < inputCount; i++)
        {
            float inputWeight = playable.GetInputWeight(i);
            ScriptPlayable<MAODepthOfFieldBokehBehaviour> inputPlayable =(ScriptPlayable<MAODepthOfFieldBokehBehaviour>)playable.GetInput(i);
            MAODepthOfFieldBokehBehaviour input = inputPlayable.GetBehaviour();
            
            blendedFocusDistance += input.FocusDistance * inputWeight;
            blendedAperture += input.Aperture * inputWeight;
            blendedFocalLength += input.FocalLength * inputWeight;
            blendedBladeCount += input.BladeCount * inputWeight;
            blendedBladeCurvature += input.BladeCurvature * inputWeight;
            blendedBladeRotation += input.BladeRotation * inputWeight;

            totalWeight += inputWeight;

            if (inputWeight > greatestWeight)
            {
                greatestWeight = inputWeight;
            }

            if (!Mathf.Approximately (inputWeight, 0f))
                currentInputs++;
        }
        m_TrackBinding.focusDistance.value = blendedFocusDistance + m_DefaultFocusDistance * (1f-totalWeight);
        m_TrackBinding.aperture.value = blendedAperture + m_DefaultAperture * (1f-totalWeight);
        m_TrackBinding.focalLength.value = blendedFocalLength + m_DefaultFocalLength * (1f-totalWeight);
        m_TrackBinding.bladeCount.value = Mathf.RoundToInt(blendedBladeCount + m_DefaultBladeCount * (1f-totalWeight));
        m_TrackBinding.bladeCurvature.value = blendedBladeCurvature + m_DefaultBladeCurvature * (1f-totalWeight);
        m_TrackBinding.bladeRotation.value = blendedBladeRotation + m_DefaultBladeRotation * (1f-totalWeight);

    }



    public override void OnPlayableDestroy (Playable playable)
    {
        m_FirstFrameHappened = false;

        if(m_TrackBinding == null)
            return;

        m_TrackBinding.focusDistance.value = m_DefaultFocusDistance;
        m_TrackBinding.aperture.value = m_DefaultAperture;
        m_TrackBinding.focalLength.value = m_DefaultFocalLength;
        m_TrackBinding.bladeCount.value = m_DefaultBladeCount;
        m_TrackBinding.bladeCurvature.value = m_DefaultBladeCurvature;
        m_TrackBinding.bladeRotation.value = m_DefaultBladeRotation;

    }
}
