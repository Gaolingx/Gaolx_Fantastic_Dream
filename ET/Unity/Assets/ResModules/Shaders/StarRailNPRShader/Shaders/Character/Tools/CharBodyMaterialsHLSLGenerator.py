COPYRIGHT = '''
/*
 * StarRailNPRShader - Fan-made shaders for Unity URP attempting to replicate
 * the shading of Honkai: Star Rail.
 * https://github.com/stalomeow/StarRailNPRShader
 *
 * Copyright (C) 2023 Stalo <stalowork@163.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
'''

CONFIG = {
    'filePath': '../CharBodyMaterials.hlsl',
    'headerGuard': '_CHAR_BODY_MATERIALS_INCLUDED',
    'materials': [0.00, 0.12, 0.25, 0.37, 0.50, 0.62, 0.75, 0.87],
    'macros': {
        'propDefine': {
            'name': 'CHAR_MAT_PROP'
        },
        'propSelect': {
            'baseName': 'SELECT_CHAR_MAT_PROPS',
            'propCounts': range(1, 10)
        }
    }
}

import io
import os

def writePropDefineMacro(fp: io.TextIOWrapper):
    materialCount = len(CONFIG['materials'])
    macroName = CONFIG["macros"]["propDefine"]["name"]

    fp.write(f'#define {macroName}(type, name) ')
    fp.write(' '.join(f'type name##{i};' for i in range(materialCount)))
    fp.write('\n\n')

def writePropSelectMacro(fp: io.TextIOWrapper):
    materials = CONFIG['materials']
    materialCount = len(materials)
    macroBaseName = CONFIG["macros"]["propSelect"]["baseName"]
    propCounts = CONFIG["macros"]["propSelect"]["propCounts"]

    for propCount in propCounts:
        paramList = ', '.join(f'type{i}, expr{i}' for i in range(propCount))
        fp.write(f'#define {macroBaseName}_{propCount}(lightMap, {paramList}) \\\n')
        fp.write('    ' + ' '.join(f'type{i} expr{i}##{materialCount - 1};' for i in range(propCount)) + ' \\\n')

        for matIndex in range(materialCount - 1):
            if matIndex == 0:
                fp.write(f'    if      (lightMap.a < {materials[matIndex + 1]:.2f}) {{ ')
            else:
                fp.write(f'    else if (lightMap.a < {materials[matIndex + 1]:.2f}) {{ ')

            fp.write(' '.join(f'expr{i}##{matIndex};' for i in range(propCount)))

            if matIndex < materialCount - 2:
                fp.write(' } \\\n')
            else:
                fp.write(' } \n')

        fp.write('\n')

if __name__ == '__main__':
    print('>> ' + os.path.abspath(CONFIG['filePath']))

    with open(CONFIG['filePath'], mode='w', encoding='utf8') as fp:
        fp.write(COPYRIGHT.strip() + '\n\n')
        fp.write('// Generated by a tool.\n\n')
        fp.write(f'#ifndef {CONFIG["headerGuard"]}\n')
        fp.write(f'#define {CONFIG["headerGuard"]}\n\n')
        writePropDefineMacro(fp)
        fp.write('// 根据角色的 LightMap.a 选择相应的属性\n')
        fp.write('// 用 array 的话，一个属性需要 9 次 mov\n')
        fp.write('// 用 if 的话，一个属性需要 7 次 movc\n\n')
        writePropSelectMacro(fp)
        fp.write('#endif\n')
