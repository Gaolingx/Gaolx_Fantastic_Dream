// This code is automatically generated by MAO Timeline Playable Wizard.
// For more information, please visit 
// https://github.com/ShiinaRinne/TimelineExtensions

using System;
using UnityEngine;
using UnityEngine.Timeline;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class MAOSplitTonineMixerBehaviour : PlayableBehaviour
{
    Color m_DefaultShadows;
    Color m_DefaultHighlights;
    float m_DefaultBalance;

    SplitToning m_TrackBinding;
    bool m_FirstFrameHappened;

    public override void ProcessFrame(Playable playable, FrameData info, object playerData)
    {
        ((Volume) playerData).profile.TryGet(out m_TrackBinding);
        if (m_TrackBinding == null)
            return;
        
        if(!m_FirstFrameHappened)
        {
            m_DefaultShadows = m_TrackBinding.shadows.value;
            m_DefaultHighlights = m_TrackBinding.highlights.value;
            m_DefaultBalance = m_TrackBinding.balance.value;

            m_FirstFrameHappened = true;
        }


        int inputCount = playable.GetInputCount();
        Color blendedShadows = Color.clear;
        Color blendedHighlights = Color.clear;
        float blendedBalance = 0f;

        float totalWeight = 0f;
        float greatestWeight = 0f;
        int currentInputs = 0;

        for(int i = 0; i < inputCount; i++)
        {
            float inputWeight = playable.GetInputWeight(i);
            ScriptPlayable<MAOSplitTonineBehaviour> inputPlayable =(ScriptPlayable<MAOSplitTonineBehaviour>)playable.GetInput(i);
            MAOSplitTonineBehaviour input = inputPlayable.GetBehaviour();
            
            blendedShadows += input.Shadows * inputWeight;
            blendedHighlights += input.Highlights * inputWeight;
            blendedBalance += input.Balance * inputWeight;

            totalWeight += inputWeight;

            if (inputWeight > greatestWeight)
            {
                greatestWeight = inputWeight;
            }

            if (!Mathf.Approximately (inputWeight, 0f))
                currentInputs++;
        }
        m_TrackBinding.shadows.value = blendedShadows + m_DefaultShadows * (1f-totalWeight);
        m_TrackBinding.highlights.value = blendedHighlights + m_DefaultHighlights * (1f-totalWeight);
        m_TrackBinding.balance.value = blendedBalance + m_DefaultBalance * (1f-totalWeight);

    }



    public override void OnPlayableDestroy (Playable playable)
    {
        m_FirstFrameHappened = false;

        if(m_TrackBinding == null)
            return;

        m_TrackBinding.shadows.value = m_DefaultShadows;
        m_TrackBinding.highlights.value = m_DefaultHighlights;
        m_TrackBinding.balance.value = m_DefaultBalance;

    }
}
