
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class map : Luban.BeanBase
{
    public map(JSONNode _buf) 
    {
        { if(!_buf["ID"].IsNumber) { throw new SerializationException(); }  ID = _buf["ID"]; }
        { if(!_buf["mapName"].IsString) { throw new SerializationException(); }  MapName = _buf["mapName"]; }
        { if(!_buf["sceneName"].IsString) { throw new SerializationException(); }  SceneName = _buf["sceneName"]; }
        { if(!_buf["playerPath"].IsString) { throw new SerializationException(); }  PlayerPath = _buf["playerPath"]; }
        { if(!_buf["playerCamPath"].IsString) { throw new SerializationException(); }  PlayerCamPath = _buf["playerCamPath"]; }
        { if(!_buf["power"].IsNumber) { throw new SerializationException(); }  Power = _buf["power"]; }
        { if(!_buf["mainCamPos"].IsObject) { throw new SerializationException(); }  MainCamPos = vec3.Deserializevec3(_buf["mainCamPos"]);  }
        { if(!_buf["mainCamRote"].IsObject) { throw new SerializationException(); }  MainCamRote = vec3.Deserializevec3(_buf["mainCamRote"]);  }
        { if(!_buf["playerBornPos"].IsObject) { throw new SerializationException(); }  PlayerBornPos = vec3.Deserializevec3(_buf["playerBornPos"]);  }
        { if(!_buf["playerBornRote"].IsObject) { throw new SerializationException(); }  PlayerBornRote = vec3.Deserializevec3(_buf["playerBornRote"]);  }
        { if(!_buf["monsterLst"].IsString) { throw new SerializationException(); }  MonsterLst = _buf["monsterLst"]; }
        { if(!_buf["exp"].IsNumber) { throw new SerializationException(); }  Exp = _buf["exp"]; }
        { if(!_buf["coin"].IsNumber) { throw new SerializationException(); }  Coin = _buf["coin"]; }
        { if(!_buf["crystal"].IsNumber) { throw new SerializationException(); }  Crystal = _buf["crystal"]; }
    }

    public static map Deserializemap(JSONNode _buf)
    {
        return new map(_buf);
    }

    public readonly int ID;
    public readonly string MapName;
    public readonly string SceneName;
    public readonly string PlayerPath;
    public readonly string PlayerCamPath;
    public readonly int Power;
    public readonly vec3 MainCamPos;
    public readonly vec3 MainCamRote;
    public readonly vec3 PlayerBornPos;
    public readonly vec3 PlayerBornRote;
    public readonly string MonsterLst;
    public readonly int Exp;
    public readonly int Coin;
    public readonly int Crystal;
   
    public const int __ID__ = 107868;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "mapName:" + MapName + ","
        + "sceneName:" + SceneName + ","
        + "playerPath:" + PlayerPath + ","
        + "playerCamPath:" + PlayerCamPath + ","
        + "power:" + Power + ","
        + "mainCamPos:" + MainCamPos + ","
        + "mainCamRote:" + MainCamRote + ","
        + "playerBornPos:" + PlayerBornPos + ","
        + "playerBornRote:" + PlayerBornRote + ","
        + "monsterLst:" + MonsterLst + ","
        + "exp:" + Exp + ","
        + "coin:" + Coin + ","
        + "crystal:" + Crystal + ","
        + "}";
    }
}

}

